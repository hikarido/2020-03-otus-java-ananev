/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.hw04;

import javax.management.NotificationEmitter;
import javax.management.NotificationListener;
import javax.management.openmbean.CompositeData;
import java.lang.management.GarbageCollectorMXBean;
import com.sun.management.GarbageCollectionNotificationInfo;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.List;
import java.util.ArrayList;

public class MemoryEater {
    public static void main(String[] args) {
        MemoryEater.switchOnMonitoring();
        Worker obj = new Worker();
        obj.run();
    }

    private static void switchOnMonitoring() {
        List<GarbageCollectorMXBean> gcbeans = java.lang.management.ManagementFactory.getGarbageCollectorMXBeans();
        for (GarbageCollectorMXBean gcbean : gcbeans) {
            System.out.println("GC name:" + gcbean.getName());
            NotificationEmitter emitter = (NotificationEmitter) gcbean;
            NotificationListener listener = (notification, handback) -> {
                if (notification.getType().equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) {
                    GarbageCollectionNotificationInfo info = GarbageCollectionNotificationInfo.from((CompositeData) notification.getUserData());
                    String gcName = info.getGcName();
                    String gcAction = info.getGcAction();
                    String gcCause = info.getGcCause();
                    long startTime = info.getGcInfo().getStartTime();
                    long duration = info.getGcInfo().getDuration();
                    System.out.println("start:" + startTime + " Name:" + gcName + ", action:" + gcAction + ", gcCause:" + gcCause + "(" + duration + " ms)");
                }
            };

            emitter.addNotificationListener(listener, null, null);
        }
    }

}

class Worker{
    private Deque<Image> images = new ArrayDeque<>();
    void run(){
        for(long i = 0; true; i++){
            images.add(new Image(1000, 1000));
            if(i % 1000 == 0){
                images.removeFirst();
            }
        }
    }

}

class Image{
    public Image(int w, int h){
        width = w;
        height = h;
        data = new ArrayList<>(height);
        for(int i  = 0; i < data.size(); i++){
            data.set(i, new ArrayList<>(width * channelCount));
        }
    }
    private List<List<Integer>> data;
    private int width;
    private int height;
    private int channelCount = 3;
}

