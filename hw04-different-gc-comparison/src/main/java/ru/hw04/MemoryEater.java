/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.hw04;

import javax.management.NotificationEmitter;
import javax.management.NotificationListener;
import javax.management.openmbean.CompositeData;
import java.lang.management.GarbageCollectorMXBean;
import com.sun.management.GarbageCollectionNotificationInfo;

import java.util.*;

public class MemoryEater {
    public static void main(String[] args) {
        GCStatistic statistic = new GCStatistic();
        statistic.switchOnMonitoring();
        Worker obj = new Worker();
        obj.run();
    }


}

class Worker{
    private Deque<Image> images = new ArrayDeque<>();
    void run(){
        for(long i = 0; true; i++){
            images.add(new Image(1, 1));
            if(i % 500 == 0){
                images.removeFirst();
                try {
                    Thread.sleep(2);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }

}

class Image{
    public Image(int w, int h){
        width = w;
        height = h;
        data = new ArrayList<>(height);
        for(int i  = 0; i < data.size(); i++){
            data.set(i, new ArrayList<>(width * channelCount));
        }
    }
    private List<List<Integer>> data;
    private int width;
    private int height;
    private int channelCount = 3;
}

class GCStatistic{

    public GCStatistic(){
       startTime = System.currentTimeMillis();
       metrics = new HashMap<>();
    }

    public void switchOnMonitoring() {
        List<GarbageCollectorMXBean> gcbeans = java.lang.management.ManagementFactory.getGarbageCollectorMXBeans();
        for (GarbageCollectorMXBean gcbean : gcbeans) {
            System.out.println("GC name:" + gcbean.getName());
            NotificationEmitter emitter = (NotificationEmitter) gcbean;
            NotificationListener listener = (notification, handback) -> {
                if (notification.getType().equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) {
                    GarbageCollectionNotificationInfo info = GarbageCollectionNotificationInfo.from((CompositeData) notification.getUserData());
                    String gcName = info.getGcName();
                    String gcAction = info.getGcAction();
                    String gcCause = info.getGcCause();

                    long duration = info.getGcInfo().getDuration();
                    updateMetric(gcName, duration);

                    endTime = System.currentTimeMillis();
                    long upTime = endTime - startTime;
                    System.out.printf("%s, %s\n", gcAction, gcCause);
                    System.out.println(String.format(
                            "Up time %d ms, Collector %s\nStats: \n%s\n", upTime, gcName, this.toString())
                    );
                }
            };

            emitter.addNotificationListener(listener, null, null);
        }
    }

    @Override
    public String toString(){
        StringBuilder buffer = new StringBuilder();
        for(Map.Entry<String, Integer> entry: metrics.entrySet()){
            buffer.append(entry.getKey() + " = " + entry.getValue() + "\n");
        }
        return buffer.toString();
    }

    private void updateMetric(String name, long value){
        int time = metrics.getOrDefault(name, 1);
        time += value;
        metrics.put(name, time);

        String countMetricKey = name + "Count";
        int count = metrics.getOrDefault( countMetricKey, 1);
        count += 1;
        metrics.put(countMetricKey, count);
    }

    private long startTime = 0;
    private long endTime = 0;

    Map<String, Integer> metrics;
}
